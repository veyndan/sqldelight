/*
 * Copyright (C) 2017 Square, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
{
  elementTypeHolderClass="com.squareup.sqldelight.core.SqlDelightTypes"
  psiPackage = "com.squareup.sqldelight.core.psi"
  psiImplPackage = "com.squareup.sqldelight.core.psi.impl"

  overrides="com.alecstrong.sql.psi.core.SqlParser"
  elementTypeClass = "com.alecstrong.sql.psi.core.SqlElementType"
  psiClassPrefix = "SqlDelight"

  parserImports=[
    // If you want to use a token from the core grammar it must be statically imported.
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.DEFAULT"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.VALUES"
    "static com.alecstrong.sql.psi.core.psi.SqlTypes.JAVADOC"
  ]
}
overrides ::= column_type | stmt_list | insert_stmt_values

stmt_list ::= import_stmt_list ( ( stmt_identifier {stmt} ';' ) | stmt_clojure ) * {
  implements="com.alecstrong.sql.psi.core.psi.SqlStmtList"
  extends="com.alecstrong.sql.psi.core.psi.impl.SqlStmtListImpl"
  pin(".*")=2
  override = true
}
stmt_clojure ::= stmt_identifier_clojure stmt_clojure_stmt_list '}' {
  implements="com.alecstrong.sql.psi.core.psi.SqlCompositeElement"
  extends="com.alecstrong.sql.psi.core.psi.SqlCompositeElementImpl"
  pin = 1
}
stmt_clojure_stmt_list ::= {stmt} ';' ( {stmt} ';' ) * {
  implements="com.alecstrong.sql.psi.core.psi.SqlCompositeElement"
  extends="com.squareup.sqldelight.core.lang.psi.ClojureStmtListMixin"
  pin(".*") = 1
}
column_type ::= {type_name} [ 'AS' ('@' annotation) * java_type_name ] {
  implements=[
    "com.alecstrong.sql.psi.core.psi.SqlColumnType";
    "com.squareup.sqldelight.core.lang.psi.TypedColumn"
  ]
  extends="com.squareup.sqldelight.core.lang.psi.ColumnTypeMixin"
  override = true
}
insert_stmt_values ::= ( VALUES ( {bind_expr} | {values_expression}
  ( ',' {values_expression} ) * ) | {compound_select_stmt} | DEFAULT VALUES ) {
  implements="com.alecstrong.sql.psi.core.psi.SqlInsertStmtValues"
  extends="com.squareup.sqldelight.core.lang.psi.InsertStmtValuesMixin"
  override = true
}

// New rules.
import_stmt ::= 'import' java_type ';' {
  extends="com.squareup.sqldelight.core.lang.psi.ImportStmtMixin"
}
import_stmt_list ::= import_stmt *
stmt_identifier ::= [ JAVADOC ] [ {identifier} ':' ] {
  extends="com.squareup.sqldelight.core.lang.psi.StmtIdentifierMixin"
  implements="com.squareup.sqldelight.core.lang.psi.StmtIdentifier"
  pin(".*") = 2
}
stmt_identifier_clojure ::= [ JAVADOC ] {identifier} '{' {
  extends="com.squareup.sqldelight.core.lang.psi.StmtIdentifierMixin"
  implements="com.squareup.sqldelight.core.psi.SqlDelightStmtIdentifier"
  pin = 3
}
annotation ::= java_type ( '(' annotation_value ')'
                         | '(' {identifier} '=' annotation_value ( ',' {identifier} '=' annotation_value )* ')'
                         )?
annotation_value ::= java_type_name '::class'
                   | {string_literal}
                   | {numeric_literal}
                   | '[' annotation_value ( ',' annotation_value ) * ']'
                   | annotation
java_type_name ::= parameterized_java_type
parameterized_java_type ::= java_type ( ( '<' java_type_name ( ',' java_type_name )* '>' )
                          | ( '<' ( java_type_name ',' )* java_type '<' java_type_name2 ( ',' java_type_name2 )* '>>' ) )?
java_type_name2 ::= java_type
java_type ::= ( {identifier} '.' )* {identifier} {
  mixin="com.squareup.sqldelight.core.lang.psi.JavaTypeMixin"
}
